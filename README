Overview

This project is designed as a backend service for Zywa, aimed at providing an internal API to return the status of a user's card. The project includes all the necessary functionality for taking data from partners company csv files and processing these "cards" accordingly. It has an API endpoint to return the card's status.

Getting Started
Prerequisites:
Python 3.9+
PostgreSQL
Docker

Set Up a Virtual Environment:
python -m venv venv
venv\Scripts\activate

Install Dependencies:
pip install -r requirements.txt

Configure PostgreSQL:
Create a PostgreSQL database and user.
Enter these commands in the environment after:
flask db init
flask db migrate -m "Create cards table"
flask db upgrade

Using Docker:
docker build -t zywa_backend_project .
docker run -p 5000:5000 zywa_backend_project

API Reference:
Endpoint: /get_card_status
Method: GET
Parameters:
card_id: String, unique identifier of the card.
user_phone: String, 9-digit phone number of the user without country code.

I have also created test_api.py testing on sqlite and test_api2.py testing on postgresql database for my own reference. They can also be used to check functionality.

The Journey:
The framework I used was flask with python because it has better data handling libraries like pandas, it is simple but powerful, it has more extensive documentation, and they are the stacks I am most comfortable with. Although I have not used flask before I found it intuitive as it is similar to PHP.

First I watched a few tutorials for getting accustomed to how flask is to be used. I created a prior front-end project using flask watching a youtube tutorial which I would have liked to combine with this project to see how the backend is working on a web page but did not have the time.

Flask supported SQLAlchemy and I could have used MySQL or SQLite which I have used before but I decided to go for PostgreSQL as it offers better scalability and is better for handling data from multiple sources. I was also excited on learning new things throughout the project. So I watched a tutorial for it as well.

For the structure of the project I got inspiration from github and youtube flasks projects as well as chat gpt. There was a circular dependency error that I encountered for which I created extensions.py. Another error I encountered was in the migrations. My card model was not being implemented on the database I had created. Initially I thought it was a database issue because unlike other SQL the database has to be created outside visual code through PostgreSQL terminal. I later found it was an issue with the migration file created and I had to edit it manually.

Other issues I faced included the testing as I have not done solely backend projects before so creating programs solely for testing due to the lack of visual information is somewhat new to me. The with app.app_context(): feature to allow programs to know their running withing the app was also new to me and I frequently ran into errors by wrongfully placing initializations outside or inside it.

Another interesting stump I faced was importing csv files as for some reason I was not able to relatively address so I went for absolute addressing. I also had to learn dockerization but that was a relatively simple concept.

As of right now one of the test in test_api2.py is returning false which still has me confused. I have wrote some code for celery which can be used for automation of csv file processing but have not implemented it into the program yet. I also have a config.py in case we decide to scale up the project but have not implemented it on the program.

The documentation is poor and I made the rookie mistake of not doing it along the way. As for possible improvements most importantly this program needs to be tested more. There are still a few issues here and there. I did not know how to use unit testing or testing on the terminal. After that is done it can be automated and tested with a stream of data. After that test using actual data and then ensure that while deploying we encrypt it using https protocol. I learned how to use Heroku but that is one of the final steps so I did not do anything with it.

I will submit this in time but I shall continue to add comments and incorporate a front-end into the project. That will allow me to learn better and it is exciting. I know I am not an expert at backend design and had to use alot of A!, tutorial, and github aid but am willing to commit alot of time and learn.
